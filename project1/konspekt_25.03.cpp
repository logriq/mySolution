def quick_sort(arr) :
    //Функція реалізує алгоритм швидкого сортування(QuickSort).
    //Основна ідея : вибрати опорний елемент(pivot), розбити масив на дві частини :
//1) елементи, які менші за опорний,
//2) елементи, які більші або рівні опорному.
//Потім рекурсивно застосувати швидке сортування до цих двох частин.

//Часова складність алгоритму :
//-Середній та найкращий випадки : O(n log n)
//- Найгірший випадок(коли обирається найменший або найбільший елемент) : O(n?)

//Просторова складність : O(n) у випадку використання списків Python через створення нових списків.

//Базовий випадок : якщо довжина масиву менше або дорівнює 1, він уже відсортований

if len(arr) <= 1 :
    return arr

//Вибір опорного елемента(pivot) - тут вибираємо середній елемент масиву

    pivot = arr[len(arr)2]  

//Розбиття масиву :
// Всі елементи, менші за pivot, потрапляють у left

left = [x for x in arr if x < pivot]

// Всі елементи, рівні pivot, потрапляють у middle

    middle = [x for x in arr if x == pivot]

// Всі елементи, більші за pivot, потрапляють у right

    right = [x for x in arr if x > pivot]

//Рекурсивне сортування підмасивів та об'єднання результату

    return quick_sort(left) + middle + quick_sort(right)

//Приклад використання швидкого сортування
    
arr = [3, 6, 8, 10, 1, 2, 1, 5, 7, 4, 9]

    sorted_arr = quick_sort(arr)

    print("Вхідний масив:", arr)

    print("Відсортований масив:", sorted_arr) // Виведе відсортований масив
